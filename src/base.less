@size: 'xs', 'sm', 'md', 'lg', 'xl';
@iteration: 12;
@spacing: 0, 8, 16, 24, 40;
@lg: 1200px;
@md: 992px;
@sm: 768px;

@media(min-width: 1200px){
    .loop(@iteration, xl);
    .loopspacing(5, xl);
    .grid-xl{
        flex:1 0 0;
        max-width: 100%;
    }
}
@media(min-width: 992px) and (max-width: 1199.99px){
    .loop(@iteration, lg);
    .loopspacing(5, lg);
    .grid-lg{
        flex:1 0 0;
        max-width: 100%;
    }
}
@media(min-width: 768px) and (max-width: 991.99px){
    .loop(@iteration, md);
    .loopspacing(5, md);
    .grid-md{
        flex:1 0 0;
        max-width: 100%;
    }
}
@media(min-width: 576px) and (max-width: 767.99px){
    .loop(@iteration, sm);
    .loopspacing(5, sm);
    .grid-sm{
        flex:1 0 0;
        max-width: 100%;
    }
}
@media(max-width: 575.99px){
    .grid-xs{
        flex:1 0 0;
        max-width: 100%;
    }
    .loop(@iteration, xs);
    .loopspacing(5, xs);
}

.loop(@index, @breakpoint) when(@index > 0){
    @flexbasis: round(@index/12* pow(10, 6)) / pow(10, 4);
    .grid-@{breakpoint}-@{index}{
        max-width: ~"@{flexbasis}%";
        flex-basis: ~"@{flexbasis}%"; 
    }
    .loop(@index - 1, @breakpoint);
}
.loopspacing(@index, @breakpoint) when( @index>0){
    @currentSpacing: extract(@spacing, @index);
    @mG: @currentSpacing/2;
    .spacing-@{breakpoint}-@{currentSpacing} {
        margin: ~"-@{mG}px";
        width: calc(~"100% + @{currentSpacing}px");
        &-item{
            padding: ~"@{mG}px";
        }
    }
    .loopspacing(@index - 1, @breakpoint);
}
